#include <bits/stdc++.h>
#include <cstdlib>
#include <cstdio>
#include <string> 
#include <fstream>
using namespace std;

void BubbleSort(vector<pair<int,string>> &lista, int tam){
	for(int fim=tam-1; fim>0; fim--){
		for(int i=0; i<fim; i++){
			if(lista[i].first>lista[i+1].first){
				pair<int, string>aux=lista[i];
				lista[i]=lista[i+1];
				lista[i+1]=aux;
			}
		}
	}
}

void BubbleSortW(vector<pair<int,string>> &lista, int tam){
	for(int fim=tam-1; fim>0; fim--){
		for(int i=0; i<fim; i++){
			if(lista[i].second>lista[i+1].second){
				pair<int, string>aux=lista[i];
				lista[i]=lista[i+1];
				lista[i+1]=aux;
			}
		}
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void troca(pair<int,string> &a, pair<int,string> &b) {
    pair<int,string>temp = a;
    a = b;
    b = temp;
}
//ORDENAÇÃO NUMERICA 
int MetadeNum(vector<pair<int,string>> &lista, int low, int high) {
    pair<int, string>pivot = lista[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (lista[j].first <= pivot.first){
            i++;
            troca(lista[i], lista[j]);
        }
        
        
    }
    troca(lista[i + 1], lista[high]);
    return (i + 1);
}

void QuickSortNum(vector<pair<int,string>> &lista, int low, int high) {
    if (low < high) {
        int pi = MetadeNum(lista, low, high);
        QuickSortNum(lista, low, pi - 1);
        QuickSortNum(lista, pi + 1, high);
    }
}
//ORDENAÇÃO ALFABETICA
int MetadeW(vector<pair<int,string>> &lista, int low, int high) {
    pair<int, string>pivot = lista[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (lista[j].second <= pivot.second){
            i++;
            troca(lista[i], lista[j]);
        }
        
        
    }
    troca(lista[i + 1], lista[high]);
    return (i + 1);
}

void QuickSortW(vector<pair<int,string>> &lista, int low, int high) {
    if (low < high) {
        int pi = MetadeW(lista, low, high);
        QuickSortW(lista, low, pi - 1);
        QuickSortW(lista, pi + 1, high);
    }
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void SelectionSortNum(vector<pair<int,string>> &lista,int tam){
	
	for(int i=0;i<tam;i++){
		for(int j=i+1;j<tam;j++){
			if(lista[j].first<lista[i].first){
				pair<int,string> aux=lista[i];
				lista[i]=lista[j];
				lista[j]=aux;
			}
		}
	}
}

void SelectionSortW(vector<pair<int,string>> &lista,int tam){
	
	for(int i=0;i<tam;i++){
		for(int j=i+1;j<tam;j++){
			if(lista[j].second<lista[i].second){
				pair<int,string> aux=lista[i];
				lista[i]=lista[j];
				lista[j]=aux;
			}
		}
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
int main() {
	vector<pair<int,string>>lista;
	//LEITURA DE ARQUIVO 
	string f1,f2;
	FILE *file = fopen("arq.txt", "r");
	if(file==NULL){
		cout<<"Erro";
	}
	char linha[50];
	int cont=0;
	
	while(fgets(linha, sizeof(linha), file) && cont < 100){
		cont++;
		stringstream ss;
		ss<<linha;
		ss>>f1>>f2;
		lista.push_back({stoi(f1),f2});
		
	}
	//ORDENACAO NUMERICA!!!
	srand(time(0));
	double timespent = 0.0;
	clock_t begin = clock();
	BubbleSort(lista, lista.size());
	//QuickSortNum(lista, 0, lista.size());
	//SelectionSortNum(lista, lista.size());
	fclose(file);
	
	ofstream arq1;
	arq1.open("arq.txt");
	for(int i=0; i<(int)lista.size(); i++){
		f1=to_string(lista[i].first);
		f1+=". "+lista[i].second+'\n';
		arq1<<f1;
	}
	arq1.close();
	
	clock_t end = clock();
	cout<<"ORDENAÇÃO NUMÉRICA"<<endl;
	for(int i=0;i<(int)lista.size();i++) cout<<lista[i].first<<" "<<lista[i].second<<endl;
	timespent += (double)(end - begin) / CLOCKS_PER_SEC;
    cout<<fixed<<setprecision(10);
    cout<<"Timer: "<<timespent<<endl;
	cout<<endl;
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	FILE *file2 = fopen("arq2.txt", "r");
	if(file2==NULL){
		cout<<"Erro";
	}
	char vt[50];
	int c=0;
	while(fgets(vt, sizeof(vt), file2) && c < 100){
		c++;
		stringstream ss;
		ss<<vt;
		ss>>f1>>f2;
		lista.push_back({stoi(f1),f2});
		
	}
	//ORDENACAO ALFABETICA
	srand(time(0));
	double timespentW = 0.0;
	clock_t beginW = clock();
	BubbleSortW(lista, lista.size());
	//QuickSortW(lista, 0, lista.size());
	//SelectionSortW(lista, lista.size());
	fclose(file2);
	
	ofstream arq2;
	arq2.open("arq2.txt");
	for(int i=0; i<(int)lista.size(); i++){
		string ff=to_string(lista[i].first);
		ff+=". "+lista[i].second+'\n';
		arq2<<ff;
	}
	arq2.close();
	
	clock_t endW = clock();
	cout<<"ORDENAÇÃO ALFABÉTICA"<<endl;
	for(int i=0;i<(int)lista.size();i++) cout<<lista[i].first<<" "<<lista[i].second<<endl;
	timespentW += (double)(endW - beginW) / CLOCKS_PER_SEC;
    cout<<fixed<<setprecision(10);
    cout<<"Timer: "<<timespent<<endl;
    
}
